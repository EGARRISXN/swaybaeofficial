// import {revalidateTag} from 'next/cache'
// import {NextResponse} from 'next/server'
// import {parseBody} from 'next-sanity/webhook'

// const revalidateSecret = process.env.SANITY_STUDIO_REVALIDATE_SECRET

// export async function POST(request) {
//   try {
//     const {body, isValidSignature} = await parseBody(request, revalidateSecret)
//     if (!isValidSignature) {
//       const message = 'Invalid signature'
//       return new Response(message, {status: 401})
//     }

//     if (!body?._type) {
//       return new Response('Bad Request', {status: 400})
//     }

//     // If the `_type` is `page`, then all `client.fetch` calls with
//     // `{next: {tags: ['page']}}` will be revalidated
//     revalidateTag(body._type)
//     if (body.slug) {
//       revalidateTag(`${body._type}:${body.slug}`)
//     }
//     return NextResponse.json({
//       status: 200,
//       revalidated: true,
//       now: Date.now(),
//       body,
//     })
//   } catch (error) {
//     console.error(error)
//     return new Response(error.message, {status: 500})
//   }
// }

//! actions
// 'use server'
// import { revalidateTag } from 'next/cache'
// import { draftMode } from 'next/headers'

// export async function revalidate({ tags }) {
//   if (draftMode().isEnabled) {
//     for (const tag of tags) {
//       await revalidateTag(`previewDrafts:${tag}`)
//     }
//   }
// }
